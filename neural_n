import sqlite3
import tensorflow as tf
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.models import Sequential
from keras.optimizers import Adam
from keras.losses import MeanSquaredError
from keras.metrics import MeanAbsoluteError
import numpy as np


conn = sqlite3.connect('photos.db')
cursor = conn.cursor()


cursor.execute("SELECT original_path, resized_path FROM photos")
photo_paths = cursor.fetchall()


data = []
for original_path, resized_path in photo_paths:
    original_image = tf.keras.preprocessing.image.load_img(original_path, target_size=(224, 224))
    resized_image = tf.keras.preprocessing.image.load_img(resized_path, target_size=(224, 224))
    original_image = tf.keras.preprocessing.image.img_to_array(original_image)
    resized_image = tf.keras.preprocessing.image.img_to_array(resized_image)
    data.append((original_image, resized_image))
data = np.array(data)


conn.close()


train_data = data[:16]  
test_data = data[4:]


train_images = train_data[:, 0] / 255.0
train_targets = train_data[:, 1] / 255.0
test_images = test_data[:, 0] / 255.0
test_targets = test_data[:, 1] / 255.0

train_images = np.reshape(train_images, (-1, 224, 224, 3))
train_targets = np.reshape(train_targets, (-1, 224, 224, 3))
test_images = np.reshape(test_images, (-1, 224, 224, 3))
test_targets = np.reshape(test_targets, (-1, 224, 224, 3))



model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(224 * 224 * 3, activation='sigmoid'))



optimizer = Adam(learning_rate=0.001)
loss = MeanSquaredError()
metrics = [MeanAbsoluteError()]
model.compile(optimizer=optimizer, loss=loss, metrics=metrics)



model.fit(train_images, train_targets, epochs=5, batch_size=10, validation_data=(test_images, test_targets))


model.save("seam_carving_model.h5")
